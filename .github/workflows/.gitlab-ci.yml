on:
  push:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  MAVEN_HOME: /opt/maven

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Passo 1: Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Passo 2: Configurar o JDK 17 com Adoptium (temurin)
      - name: Set up JDK 17 (Adoptium Temurin)
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Git LFS
        run: git lfs install

      - name: List Git LFS files
        run: git lfs ls-files

      - name: Pull Git LFS files
        run: git lfs pull

      # Passo 3: Instalar o Maven no Ubuntu
      - name: Install Maven
        run: sudo apt-get install -y maven

      # Passo 4: Navegar até o diretório correto e rodar o Maven
      - name: Build with Maven
        run: |
          cd auth  # Navegar para o diretório onde está o pom.xml
          mvn clean install -DskipTests

      # Passo 5: Criar a imagem Docker
      - name: Set up Docker Buildx
        run: |
          docker buildx create --use
          
      - name: Build Docker Image
        run: |
          docker build -t anajumedina/my-java-app:latest ./auth

      # Passo 7: Login no Docker Hub e Push da imagem
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image to Registry
        run: docker push anajumedina/my-java-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Passo 1: Configurar as credenciais para o Kubernetes
      - name: Set up Kubernetes context
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig
          export KUBECONFIG=kubeconfig

      # Passo 2: Configurar kubectl
      - name: Configurar kubectl
        run: |
          kubectl config use-context docker-desktop

      # Passo 3: Aplicar o Kubernetes Deployment
      - name: Aplicar o Kubernetes Deployment
        run: |
          kubectl apply -f k8s/deployment.yaml

      # Passo 4: Verificar Pods no Kubernetes
      - name: Verificar Pods no Kubernetes
        run: |
          kubectl get pods
