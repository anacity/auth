on:
  push:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  KUBECONFIG_BASE64: ${{ secrets.KUBECONFIG_BASE64 }}
  MAVEN_HOME: /opt/maven

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Passo 1: Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0   # Garante o clone raso, para apenas o último commit

      - name: Verificar o conteúdo do repositório
        run: |
          pwd
          echo "Conteúdo da pasta do repositório:"
          ls -R

      # Passo 2: Configurar o JDK 17 com Adoptium (temurin)
      - name: Set up JDK 17 (Adoptium Temurin)
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Git LFS
        run: git lfs install

      - name: List Git LFS files
        run: git lfs ls-files

      - name: Pull Git LFS files
        run: git lfs pull

      # Passo 3: Instalar o Maven no Ubuntu
      - name: Install Maven
        run: sudo apt-get install -y maven

      # Passo 4: Navegar até o diretório correto e rodar o Maven
      - name: Build with Maven
        run: |
          cd auth  # Navegar para o diretório onde está o pom.xml
          mvn clean install -DskipTests

      # Passo 5: Criar a imagem Docker
      - name: Build Docker Image
        run: |
          VERSION="v1.${{ github.run_number }}"
          docker build -t anajumedina/my-java-app:$VERSION ./auth

      # Passo 6: Login no Docker Hub e Push da imagem
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image to Registry
        run: |
          VERSION="v1.${{ github.run_number }}" 
          docker push anajumedina/my-java-app:$VERSION

      - name: Verificar o conteúdo do repositório 2
        run: |
          pwd
          echo "Conteúdo da pasta do repositório:"
          ls -R

      - name: Salvar artefatos
        uses: actions/upload-artifact@v4
        with:
          name: auth-artifacts
          path: auth

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Baixar artefatos
        uses: actions/download-artifact@v4
        with:
          name: auth-artifacts
          path: auth

      # Passo 1: Instalar o Minikube
      - name: Install Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo mv minikube /usr/local/bin/
          sudo chmod +x /usr/local/bin/minikube

      # Passo 2: Instalar o kubectl
      - name: Install kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl
          sudo mv kubectl /usr/local/bin/kubectl
          sudo chmod +x /usr/local/bin/kubectl

      # Passo 3: Iniciar o Minikube
      - name: Start Minikube
        run: |
          minikube start --driver=docker  # Usa o driver Docker no GitHub Actions
          kubectl config use-context minikube  # Usar o contexto Minikube

      # Passo 4: Decodificar o kubeconfig do segredo base64
      - name: Set up Kubernetes context
        run: |
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 --decode > kubeconfig
          export KUBECONFIG=kubeconfig
          # Verificar se o KUBECONFIG foi configurado corretamente
          cat $KUBECONFIG

      # Passo 5: Aplicar o Kubernetes Deployment
      - name: Aplicar o Kubernetes Deployment
        run: |
          kubectl apply -f ./auth/deployment.yaml  --validate=false

      # Passo 6: Verificar Pods no Kubernetes
      - name: Verificar Pods no Kubernetes
        run: |
          kubectl get pods
