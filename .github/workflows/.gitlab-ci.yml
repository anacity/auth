name: Build and Deploy Java Application

on:
  push:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  K8S_SERVER: ${{ secrets.K8S_SERVER }}
  K8S_TOKEN: ${{ secrets.K8S_TOKEN }}
  K8S_CA: ${{ secrets.K8S_CA }}
  MAVEN_HOME: /opt/maven

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Passo 1: Checkout do código
      - name: Checkout code
        uses: actions/checkout@v2

      # Passo 2: Configurar o JDK 17 com Adoptium (temurin)
      - name: Set up JDK 17 (Adoptium Temurin)
        uses: actions/setup-java@v2
        with:
          java-version: '17'   # Usando JDK 17
          distribution: 'temurin'  # Usando Adoptium (temurin)

      # Passo 3: Instalar o Maven no Ubuntu
      - name: Install Maven
        run: sudo apt-get install -y maven

      # Passo 4: Verificar a estrutura do diretório e mover para o diretório correto
      - name: Check directory structure
        run: |
          ls -la
          # Navegar para o diretório onde está o pom.xml
          cd auth/auth

      # Passo 5: Instalar dependências e empacotar a aplicação usando Maven
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Passo 6: Criar a imagem Docker
      - name: Build Docker Image
        run: |
          docker build -t my-java-app:$GITHUB_SHA .

      # Passo 7: Testar a imagem Docker (opcional)
      - name: Test Docker Image
        run: |
          docker run my-java-app:$GITHUB_SHA java -jar /path/to/your/app.jar --version

      # Passo 8: Login no Docker Hub e Push da imagem
      - name: Login to Docker Hub
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Push Docker Image to Registry
        run: docker push my-java-app:$GITHUB_SHA

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Passo 9: Configuração e Deploy no Kubernetes
      - name: Set up Kubernetes
        run: |
          kubectl config set-cluster my-cluster --server=$K8S_SERVER --certificate-authority=$K8S_CA
          kubectl config set-credentials deployer --token=$K8S_TOKEN
          kubectl config set-context my-context --cluster=my-cluster --user=deployer
          kubectl config use-context my-context

      # Passo 10: Deploy da imagem no Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/my-app my-java-app=my-java-app:$GITHUB_SHA
          kubectl rollout status deployment/my-app
